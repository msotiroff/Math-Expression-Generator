@model MathExpressionGenerator.Web.Models.IndexViewModel
@{
    var lang = BaseController.CurrentLanguage;
}
@inject IExpressionContainer expressionContainer;
@inject LambdaOptions lambdaOptions;
<hr />
<span id="baseUrl" hidden>@lambdaOptions.ApplicationBasePath</span>
<div class="container row">
    <div class="col-md-4">

        <form asp-area="" asp-controller="home" asp-action="Index" method="post">
            <input asp-for="AllExpressionTypes" readonly hidden="hidden" />
            <input asp-for="AllExpressionOperations" readonly hidden="hidden" />
            <input asp-for="Result" hidden="hidden" />
            <div class="form-group">
                <label class="control-label">@lang.ChooseOperationType</label>
                <select asp-for="ChosenExpressionOperation"
                        asp-items="Model.AllExpressionOperations"
                        onchange="reload(this.value);"
                        class="form-control"></select>
                <span hidden id="divisionAlertBox" class="text-warning">@lang.DivisionWarningMessage</span>
            </div>
            <div class="form-group">
                <label class="control-label">@lang.ChooseExpressionType</label>
                <select asp-for="ChosenExpressionType"
                        asp-items="@Model.AllExpressionTypes"
                        class="form-control"></select>
            </div>
            <div class="form-group">
                <label class="control-label">@lang.ChooseMinOperand</label>
                <input asp-for="OperandMinValue" class="form-control" maxlength="10" />
            </div>
            <div class="form-group">
                <label class="control-label">@lang.ChooseMaxOperand</label>
                <input asp-for="OperandMaxValue" class="form-control" maxlength="10" />
            </div>
            <div class="form-group">
                <label class="control-label">@lang.ExpressionsCount</label>
                <input asp-for="ExpressionsCount" class="form-control" maxlength="5" />
            </div>
            <div class="form-group">
                <div class="checkbox">
                    <label>
                        <input asp-for="ShouldRandomize" /> @lang.Randomize
                    </label>
                </div>
            </div>
            <div hidden id="minOperandAlertBox" class="text-danger">@lang.InvalidNumberMinValueErrorMsg</div>
            <div hidden id="maxOperandAlertBox" class="text-danger">@lang.InvalidNumberMaxValueErrorMsg</div>
            <div hidden id="countOperandAlertBox" class="text-danger">@lang.MaxCountOfExpressionsExceeded</div>
            <div hidden id="differenceAlertBox" class="text-danger">@lang.InvalidDifferenceMinMaxValue</div>
            <div class="form-group pull-left">
                <div class="btn btn-success" onclick="download();">@lang.Save</div>
            </div>
            <div class="form-group pull-right">
                <a asp-area="" asp-controller="home" asp-action="clear" class="btn btn-warning">@lang.Clear</a>
                <input type="submit" value="@lang.Add" class="btn btn-primary" />
            </div>
        </form>
    </div>
    <div class="col-sm-12 col-md-8">
        <br />
        <textarea rows="14" class="form-control text-large" readonly>@expressionContainer.GetExpressionsAsString()</textarea>
    </div>
</div>

@section Scripts {
    <script charset="utf-8">
        let baseUrl = (document).getElementById('baseUrl').innerText;

        function reload(dropDownValue) {
            window.location.href = baseUrl + '/home/index?expressionOperation=' + dropDownValue;
        }

        function download() {
            window.location.href = baseUrl + '/home/download';
        }

        $(document).ready(function () {
            let mathOperation = $('#ChosenExpressionOperation').val();
            let divisionAlertBox = document.getElementById('divisionAlertBox');
            if (mathOperation === 'Division') {
                $('#divisionAlertBox').fadeIn();
            } else {
                $('#divisionAlertBox').fadeOut();
            }

        let operandMin = $('#OperandMinValue').val();
            if (operandMin < @Constants.OperandMinValue) {
                $('#minOperandAlertBox').fadeIn();
            } else {
                $('#minOperandAlertBox').fadeOut();
            }

            let operandMax = $('#OperandMaxValue').val();
            if (operandMax > @Constants.OperandMaxValue) {
                $('#maxOperandAlertBox').fadeIn();
            } else {
                $('#maxOperandAlertBox').fadeOut();
            }

            let expressionsCount = $('#ExpressionsCount').val();
            if (expressionsCount > @Constants.ExpressionsCountMaxValue) {
                $('#countOperandAlertBox').fadeIn();
            } else {
                $('#countOperandAlertBox').fadeOut();
            }

            if (operandMin > operandMax) {
                $('#differenceAlertBox').fadeIn();
            } else {
                $('#differenceAlertBox').fadeOut();
            }
        });
    </script>
}